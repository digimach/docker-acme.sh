name: Docker Build

on:
  push:
    branches:
      - main
    paths-ignore:
      - '*.md'
  pull_request:
    branches:
      - main
  schedule:
    # The time choosen is just arbitrary and randomly generated
    - cron:  '23 8 * * *'
  workflow_dispatch:
    inputs:
      base_images:
        description: List of base images to build
        default: 'alpinelinux, debian, oraclelinux, ubuntu'
        required: false

env:
  acmesh_version: master
  docker_latest_tag: true
  docker_stable_tag: false
  latest_base_os: ubuntu
  stable_base_os: null
  docker_manifest_tags_dated: "%base_os%_%acmesh_version%_%date%"
  docker_manifest_tags_undated: "%base_os%_%acmesh_version%"

#concurrency:
  group: ci-docker-build-${{ github.ref }}
  cancel-in-progress: false

# Everything below should be common under all branches
jobs:
  prepare:
    name: Create build matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.prepare_matrix.outputs.matrix }}
      skip_build: ${{ steps.prepare_matrix.outputs.skip_build }}
      date_stamp: ${{ steps.generate_date_stamp.outputs.date_stamp }}
      buildable_base_images: ${{ steps.get_base_images.outputs.buildable_base_images }}
      base_images_to_build: ${{ steps.get_base_images.outputs.base_images_to_build }}

    steps:
      - name: checkout code
        uses: actions/checkout@v2  
        with:
          fetch-depth: 0 

      - name: Get base images to build
        id: get_base_images
        run: .github/workflows/scripts/get_base_images.sh
        env:
          EVENT_NAME: "${{ github.event_name }}"
          INPUTS_BASE_IMAGES: ${{ github.event.inputs.base_images }}
          BASE_REF: ${{ github.base_ref }}
          BUILD_REF: ${{ github.ref }}

      - name: Prepare matrix
        id: prepare_matrix
        run: .github/workflows/scripts/prepare_matrix.py
        env:
          BASE_IMAGES: "${{ steps.get_base_images.outputs.base_images_to_build }}"          
      
      - name: Generate Date stamp
        id: generate_date_stamp
        run: |
          echo "::set-output name=date_stamp::$(date +'%Y%m%d')"

  trivy_repo_scan:
    name: Trivy Scan on Repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results.sarif'

  build:
    needs: 
      - prepare
    if: ${{ needs.prepare.outputs.skip_build == 'false' }}
    strategy:
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
      fail-fast: false

    runs-on: ubuntu-latest
    services:
      local_docker_registry:
        image: registry:2
        ports:
          - 80:5000
    steps:
      - name: checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host
      
      - name: Get Parameters
        id: get_parameters
        run: .github/workflows/scripts/get_parameters.sh
        env:
           BASE_IMAGE: "${{ matrix.base_image }}" 
           DATE_STAMP: "${{ needs.prepare.outputs.date_stamp }}"
           PLATFORM: "${{ matrix.platform }}"

      - name: Build image
        uses: docker/build-push-action@v2
        with:
          context: ${{ matrix.base_image }}
          platforms: ${{ matrix.platform }}
          push: true
          build-args: |
            "acmesh_version=${{ steps.get_parameters.outputs.acmesh_version }}"
          tags: |
            "localhost/digimach/acme.sh:${{ steps.get_parameters.outputs.tag }}"

      - name: Pull Image
        env:
          DOCKER_IMAGE: localhost/digimach/acme.sh
          DOCKER_IMAGE_TAG: ${{ steps.get_parameters.outputs.tag }}
        run: |
          docker image pull --platform "${{ matrix.platform }}" "$DOCKER_IMAGE":"$DOCKER_IMAGE_TAG"
          echo "** Pull complete"
          docker image tag localhost/digimach/acme.sh:"$DOCKER_IMAGE_TAG" digimach/acme.sh:"$DOCKER_IMAGE_TAG"
          echo "** Tagging complete"

      - name: Run Trivy container vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'digimach/acme.sh:${{ steps.get_parameters.outputs.tag }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'    
        env:
          TRIVY_NON_SSL: true   

      - name: Upload Trivy container scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Test Docker image
        env:
          DOCKER_IMAGE: localhost/digimach/acme.sh
          DOCKER_IMAGE_TAG: ${{ steps.get_parameters.outputs.tag }}
        timeout-minutes: 2
        run: .github/workflows/scripts/test_docker_image.sh

      - name: Login to Docker Hub Container Registry
        if: ${{ ( contains(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' )}}
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Publish Image
        if: ${{ ( contains(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' )}}
        env:
          DOCKER_IMAGE: localhost/digimach/acme.sh
          DOCKER_IMAGE_TAG: ${{ steps.get_parameters.outputs.tag }}
        run: |
          docker image pull --platform "${{ matrix.platform }}" "$DOCKER_IMAGE":"$DOCKER_IMAGE_TAG"
          echo "** Pull complete"
          docker image tag localhost/digimach/acme.sh:"$DOCKER_IMAGE_TAG" digimach/acme.sh:"$DOCKER_IMAGE_TAG"
          echo "** Tagging complete"
          docker image push digimach/acme.sh:"$DOCKER_IMAGE_TAG"
          echo "** Push complete"
          
      - name: Create Manifest Entry
        if: ${{ ( contains(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' )}}
        env:
          DOCKER_IMAGE_TAG: ${{ steps.get_parameters.outputs.tag }}
        run: |
          echo "$DOCKER_IMAGE_TAG" > /tmp/manifest.txt
      
      - name: Upload manifest file
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.get_parameters.outputs.tag }}
          path: /tmp/manifest.txt

  dated_os_based_manifest:
    needs:
      - prepare
      - trivy_repo_scan
      - build
    if: ${{ ( contains(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' )}}
    runs-on: ubuntu-latest
    steps:
      - name: Download all manifest artifacts
        uses: actions/download-artifact@v2
        with:
          path: manifests/

      - name: Login to Docker Hub Container Registry
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create Dated OS Based Manifest
        shell: python
        run: |
          import subprocess
          import os

          manifests_data = {}

          for tag in os.listdir('manifests'):
            manifest_name = "-".join(tag.split("-")[:3])
            manifests_data.setdefault(manifest_name, [])
            manifests_data[manifest_name].append("--amend digimach/acme.sh:" + tag)

          
          for manifest_name, ammend_tags in manifests_data.items():
            cmd = "docker manifest create digimach/acme.sh:{0} {1}".format(manifest_name, " ".join(ammend_tags))
            print(cmd)
            subprocess.check_call(cmd.split(" "))
            print("** Created manifest:", manifest_name)

            cmd = "docker manifest push digimach/acme.sh:{0}".format(manifest_name)
            print(cmd)
            subprocess.check_call(cmd.split(" "))
            print("** Pushed manifest:", manifest_name)

  dynamic_os_based_manifest:
    needs:
      - prepare
      - trivy_repo_scan
      - build
    if: ${{ ( contains(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' )}}
    runs-on: ubuntu-latest
    steps:
      - name: Download all manifest artifacts
        uses: actions/download-artifact@v2
        with:
          path: manifests/

      - name: Login to Docker Hub Container Registry
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create Dynamic OS Based Manifest
        shell: python
        run: |
          import subprocess
          import os
          import re

          manifests_data = {}

          for tag in os.listdir('manifests'):
            manifest_name = "-".join(tag.split("-")[:2])
            manifest_name = re.sub('^(.*)-master$', '\\1-latest', manifest_name)
            manifests_data.setdefault(manifest_name, [])
            manifests_data[manifest_name].append("--amend digimach/acme.sh:" + tag)

          
          for manifest_name, ammend_tags in manifests_data.items():
            cmd = "docker manifest create digimach/acme.sh:{0} {1}".format(manifest_name, " ".join(ammend_tags))
            print(cmd)
            subprocess.check_call(cmd.split(" "))
            print("** Created manifest:", manifest_name)

            cmd = "docker manifest push digimach/acme.sh:{0}".format(manifest_name)
            print(cmd)
            subprocess.check_call(cmd.split(" "))
            print("** Pushed manifest:", manifest_name)

  dynamic_manifest:
    needs:
      - prepare
      - trivy_repo_scan
      - build
    if: ${{ ( contains(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' )}}
    runs-on: ubuntu-latest
    steps:
      - name: Download all manifest artifacts
        uses: actions/download-artifact@v2
        with:
          path: manifests/

      - name: Login to Docker Hub Container Registry
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create Manifest
        shell: python
        run: |
          import subprocess
          import os
          import re

          manifests_data = {}

          for tag in os.listdir('manifests'):
            image_base_os = tag.split("-")[0]
            acmesh_version = tag.split("-")[1]

            if image_base_os == "ubuntu":
              if acmesh_version == "master":
                manifest_name = "latest"
                manifests_data.setdefault(manifest_name, [])
                manifests_data[manifest_name].append("--amend digimach/acme.sh:" + tag)
              elif acmesh_version == "2.8.8":
                manifest_name = "stable"
                manifests_data.setdefault(manifest_name, [])
                manifests_data[manifest_name].append("--amend digimach/acme.sh:" + tag)
            else:
              continue

          
          for manifest_name, ammend_tags in manifests_data.items():
            cmd = "docker manifest create digimach/acme.sh:{0} {1}".format(manifest_name, " ".join(ammend_tags))
            print(cmd)
            subprocess.check_call(cmd.split(" "))
            print("** Created manifest:", manifest_name)

            cmd = "docker manifest push digimach/acme.sh:{0}".format(manifest_name)
            print(cmd)
            subprocess.check_call(cmd.split(" "))
            print("** Pushed manifest:", manifest_name)
      