name: Docker Build

on:
  push:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - .github/workflows/shell_linting.yaml
      - .github/workflows/scripts/create_stable_branch/**
      - .github/workflows/create_stable_branch.yaml
  pull_request:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - .github/workflows/shell_linting.yaml
      - .github/workflows/scripts/create_stable_branch/**
      - .github/workflows/create_stable_branch.yaml

  schedule:
    # The time choosen is just arbitrary and randomly generated
    - cron: 23 8 * * *
  workflow_dispatch:
    inputs:
      base_images:
        description: List of base images to build
        default: alpinelinux, amazonlinux, rockylinux, ubuntu
        required: false

env:
  acmesh_version:
  latest_base_os: ubuntu
  stable_base_os: ubuntu
  latest_acmesh_version: master
  stable_acmesh_version: 2.9.0
  latest_branch: main
  stable_branch_prefix: stable/

concurrency:
  group: ci-docker-build-${{ github.ref }}
  cancel-in-progress: true

# Everything below should be common under all branches
jobs:
  prepare:
    name: Prepare for build
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.prepare_matrix.outputs.matrix }}
      skip_build: ${{ steps.prepare_matrix.outputs.skip_build }}
      date_stamp: ${{ steps.generate_matrix_parameters.outputs.date_stamp }}
      buildable_base_images: ${{ steps.get_base_images.outputs.buildable_base_images }}
      base_images_to_build: ${{ steps.get_base_images.outputs.base_images_to_build }}
      docker_publish: ${{ steps.generate_matrix_parameters.outputs.docker_publish }}

    steps:
      - name: Checkout Code
        id: checkout_code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get base images to build
        id: get_base_images
        run: .github/workflows/scripts/get_base_images.sh
        env:
          EVENT_NAME: ${{ github.event_name }}
          INPUTS_BASE_IMAGES: ${{ github.event.inputs.base_images }}
          BASE_REF: ${{ github.base_ref }}
          BUILD_REF: ${{ github.ref }}

      - name: Prepare matrix
        id: prepare_matrix
        run: .github/workflows/scripts/prepare_matrix.py
        env:
          BASE_IMAGES: ${{ steps.get_base_images.outputs.base_images_to_build }}

      - name: Generate Matrix Parameters
        id: generate_matrix_parameters
        env:
          LATEST_BRANCH: ${{ env.latest_branch }}
          STABLE_BRANCH_PREFIX: ${{ env.stable_branch_prefix }}
        run: .github/workflows/scripts/generate_matrix_parameters.sh

  trivy_repo_scan:
    name: Trivy Scan on Repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        id: checkout_code
        uses: actions/checkout@v2

      - name: Run Trivy vulnerability scanner in repo mode
        id: trivy_repo_scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          ignore-unfixed: true
          format: template
          template: '@/contrib/sarif.tpl'
          output: trivy-results.sarif
          severity: CRITICAL

      - name: Upload Trivy scan results to GitHub Security tab
        id: trivy_repo_scan_result_upload
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: trivy-results.sarif

  build_matrix_docker:
    name: Build Docker containers
    needs:
      - prepare
    if: ${{ needs.prepare.outputs.skip_build == 'false' }}
    strategy:
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
      fail-fast: false

    runs-on: ubuntu-latest
    services:
      local_docker_registry:
        image: registry:2
        ports:
          - 80:5000
    steps:
      - name: Checkout Code
        id: checkout_code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Get Parameters
        id: get_parameters
        env:
          BASE_IMAGE: ${{ matrix.base_image }}
          DATE_STAMP: ${{ needs.prepare.outputs.date_stamp }}
          PLATFORM: ${{ matrix.platform }}
          LATEST_ACMESH_VERSION: ${{ env.latest_acmesh_version }}
          STABLE_ACMESH_VERSION: ${{ env.stable_acmesh_version }}
          LATEST_BRANCH: ${{ env.latest_branch }}
          STABLE_BRANCH_PREFIX: ${{ env.stable_branch_prefix }}
        run: .github/workflows/scripts/get_parameters.sh

      - name: Build image
        uses: docker/build-push-action@v2
        with:
          context: ${{ matrix.base_image }}
          platforms: ${{ matrix.platform }}
          push: true
          build-args: |
            "acmesh_version=${{ steps.get_parameters.outputs.acmesh_version }}"
          tags: |
            "localhost/digimach/acme.sh:${{ steps.get_parameters.outputs.tag }}"

      - name: Pull Image
        env:
          DOCKER_IMAGE: localhost/digimach/acme.sh
          DOCKER_IMAGE_TAG: ${{ steps.get_parameters.outputs.tag }}
        run: |
          docker image pull --platform "${{ matrix.platform }}" "$DOCKER_IMAGE":"$DOCKER_IMAGE_TAG"
          echo "** Pull complete"
          docker image tag localhost/digimach/acme.sh:"$DOCKER_IMAGE_TAG" digimach/acme.sh:"$DOCKER_IMAGE_TAG"
          echo "** Tagging complete"

      - name: Run Trivy container vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: digimach/acme.sh:${{ steps.get_parameters.outputs.tag }}
          format: template
          template: '@/contrib/sarif.tpl'
          output: trivy-results.sarif
        env:
          TRIVY_NON_SSL: true

      - name: Upload Trivy container scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: trivy-results.sarif

      - name: Test Docker image
        env:
          DOCKER_IMAGE: localhost/digimach/acme.sh
          DOCKER_IMAGE_TAG: ${{ steps.get_parameters.outputs.tag }}
        timeout-minutes: 2
        run: .github/workflows/scripts/test_docker_image.sh

      - name: Login to Docker Hub Container Registry
        if: ${{ needs.prepare.outputs.docker_publish== 'true' }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Publish Image
        if: ${{ needs.prepare.outputs.docker_publish== 'true' }}
        env:
          DOCKER_IMAGE: localhost/digimach/acme.sh
          DOCKER_IMAGE_TAG: ${{ steps.get_parameters.outputs.tag }}
        run: |
          docker image pull --platform "${{ matrix.platform }}" "$DOCKER_IMAGE":"$DOCKER_IMAGE_TAG"
          echo "** Pull complete"
          docker image tag localhost/digimach/acme.sh:"$DOCKER_IMAGE_TAG" digimach/acme.sh:"$DOCKER_IMAGE_TAG"
          echo "** Tagging complete"
          docker image push digimach/acme.sh:"$DOCKER_IMAGE_TAG"
          echo "** Push complete"

      - name: Create tag meta entry
        if: ${{ needs.prepare.outputs.docker_publish == 'true' }}
        env:
          DOCKER_IMAGE_TAG: ${{ steps.get_parameters.outputs.tag }}
        run: |
          echo "BASE_IMAGE=${{ matrix.base_image }}" > /tmp/tag.txt
          echo "PLATFORM=${{ matrix.platform }}" >> /tmp/tag.txt
          echo "DATE_STAMP=${{ needs.prepare.outputs.date_stamp }}" >> /tmp/tag.txt
          echo "DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG" >> /tmp/tag.txt

      - name: Upload tag meta file
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.get_parameters.outputs.tag }}
          path: /tmp/tag.txt

  dated_os_based_manifest:
    needs:
      - prepare
      - trivy_repo_scan
      - build_matrix_docker
    if: ${{ needs.prepare.outputs.docker_publish== 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        id: checkout_code
        uses: actions/checkout@v2

      - name: Download all tag meta artifacts
        uses: actions/download-artifact@v2
        with:
          path: tags_meta/

      - name: Login to Docker Hub Container Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create dated OS based manifest
        run: .github/workflows/scripts/docker_manifest.py dated_os
        env:
          LATEST_ACMESH_VERSION: ${{ env.latest_acmesh_version }}
          STABLE_ACMESH_VERSION: ${{ env.stable_acmesh_version }}
          LATEST_BRANCH: ${{ env.latest_branch }}
          STABLE_BRANCH_PREFIX: ${{ env.stable_branch_prefix }}
          LATEST_BASE_OS: ${{ env.latest_base_os }}
          STABLE_BASE_OS: ${{ env.stable_base_os }}

  dynamic_os_based_manifest:
    needs:
      - prepare
      - trivy_repo_scan
      - build_matrix_docker
    if: ${{ needs.prepare.outputs.docker_publish== 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        id: checkout_code
        uses: actions/checkout@v2

      - name: Download all manifest artifacts
        uses: actions/download-artifact@v2
        with:
          path: tags_meta/

      - name: Login to Docker Hub Container Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create dynamic os based Manifest
        run: .github/workflows/scripts/docker_manifest.py dynamic_os
        env:
          LATEST_ACMESH_VERSION: ${{ env.latest_acmesh_version }}
          STABLE_ACMESH_VERSION: ${{ env.stable_acmesh_version }}
          LATEST_BRANCH: ${{ env.latest_branch }}
          STABLE_BRANCH_PREFIX: ${{ env.stable_branch_prefix }}
          LATEST_BASE_OS: ${{ env.latest_base_os }}
          STABLE_BASE_OS: ${{ env.stable_base_os }}

  dynamic_manifest:
    needs:
      - prepare
      - trivy_repo_scan
      - build_matrix_docker
    if: ${{ needs.prepare.outputs.docker_publish== 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        id: checkout_code
        uses: actions/checkout@v2

      - name: Download all manifest artifacts
        uses: actions/download-artifact@v2
        with:
          path: tags_meta/

      - name: Login to Docker Hub Container Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create dynamic manifest
        run: .github/workflows/scripts/docker_manifest.py dynamic
        env:
          LATEST_ACMESH_VERSION: ${{ env.latest_acmesh_version }}
          STABLE_ACMESH_VERSION: ${{ env.stable_acmesh_version }}
          LATEST_BRANCH: ${{ env.latest_branch }}
          STABLE_BRANCH_PREFIX: ${{ env.stable_branch_prefix }}
          LATEST_BASE_OS: ${{ env.latest_base_os }}
          STABLE_BASE_OS: ${{ env.stable_base_os }}

  acmesh_versioned_manifest:
    needs:
      - prepare
      - trivy_repo_scan
      - build_matrix_docker
    if: ${{ needs.prepare.outputs.docker_publish== 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        id: checkout_code
        uses: actions/checkout@v2

      - name: Download all manifest artifacts
        uses: actions/download-artifact@v2
        with:
          path: tags_meta/

      - name: Login to Docker Hub Container Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create acme.sh versioned based manifest
        run: .github/workflows/scripts/docker_manifest.py acmesh_versioned
        env:
          LATEST_ACMESH_VERSION: ${{ env.latest_acmesh_version }}
          STABLE_ACMESH_VERSION: ${{ env.stable_acmesh_version }}
          LATEST_BRANCH: ${{ env.latest_branch }}
          STABLE_BRANCH_PREFIX: ${{ env.stable_branch_prefix }}
          LATEST_BASE_OS: ${{ env.latest_base_os }}
          STABLE_BASE_OS: ${{ env.stable_base_os }}
